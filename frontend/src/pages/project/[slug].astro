---
import { Badge } from '@/components/ui/badge'
import { Button, buttonVariants } from '@/components/ui/button'
import { Github, ExternalLink } from 'lucide-react'

import type { InferGetStaticPropsType, GetStaticPaths } from 'astro'
import { q } from 'groqd'
import { runQuery, projectSingleSelection } from '@/lib/project'
import PortableText from '../../components/PortableText.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'
import PortableTextImage from '@/components/PortableTextImage.astro'
import { formatDate } from '@/lib'

import {metaDescriptionSlice} from '@/lib/utils'

export const getStaticPaths = (async () => {
  async function getProjects() {
    return runQuery(
      q('*').filter("_type == 'project'").grab(projectSingleSelection),
    )
  }
  const projects = await getProjects()

  return projects.map((project) => {
    return {
      params: {
        slug: project.slug || '',
      },
      props: { ...project },
    }
  })
}) satisfies GetStaticPaths

export type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { ...project } = Astro.props
---

<BaseLayout
  title={project.title}
  description={metaDescriptionSlice(project.body)}
>
  <section class="grid items-center">
    <div class="flex flex-col items-start">
      <div>
        {
          project.title && (
            <h1 class="pb-2 text-3xl font-extrabold leading-tight tracking-tighter md:text-4xl">
              {project.title.toLocaleUpperCase()}
            </h1>
          )
        }
        <div class="mb-8">
          <p class="text-base tracking-tight">
            Project created on {formatDate(project.createdAt)}
          </p>
        </div>
      </div>
      <article
        class="pb-8 text-justify text-base text-muted-foreground paragraph:hyphens-auto anchor:font-medium anchor:underline anchor:underline-offset-4"
      >
        <PortableText portableText={project.body} />
      </article>
      <div class="mb-8 flex gap-2">
        {
          project.projectLink && (
            <a
              href={project.projectLink}
              class:list={[buttonVariants(), 'transition-none']}
              target="_blank"
              rel="noreferrer"
            >
              <ExternalLink className="mr-2 h-4 w-4" />
              Website
            </a>
          )
        }
        {
          project.repositoryLink && (
            <a
              href={project.repositoryLink}
              class:list={[
                buttonVariants({ variant: 'outline' }),
                'transition-none',
              ]}
              target="_blank"
              rel="noreferrer"
            >
              <Github className="mr-2 h-4 w-4" />
              Source
            </a>
          )
        }
      </div>
      {
        project.skills && (
          <div class="mb-8 flex flex-wrap gap-2">
            {project.skills.map((skill) => (
              <Badge className="transition-none" variant="secondary">
                {skill.title}
              </Badge>
            ))}
          </div>
        )
      }
      {
        project.mainImage && (
          <PortableTextImage
            asset={project.mainImage}
            alt={project.mainImage?.altText}
            class="mb-8 aspect-video w-full rounded-lg object-cover "
          />
        )
      }
      {
        project.projectImages &&
          project.projectImages.map((projectImage) => (
            <PortableTextImage
              asset={projectImage}
              alt={projectImage?.altText}
              class="mb-8 aspect-video w-full rounded-lg object-cover "
            />
          ))
      }
    </div>
  </section>
</BaseLayout>
